syntax = "proto3";

package distributed_lock;

option go_package = "distributed-lock/proto";

service DistributedLock {
  rpc InitConnection(InitRequest) returns (InitResponse);
  rpc LockAcquire(LockRequest) returns (stream LockResponse);
  rpc LockRelease(LockRequest) returns (LockResponse);
  rpc AppendFile(AppendRequest) returns (AppendResponse);
  rpc GetQueueIndex(Empty) returns (GetQueueIndexResponse);
  rpc UpdateLeader(UpdateLeaderRequest) returns (Empty);
  rpc Heartbeat(Empty) returns (Empty);
  rpc AddQueue(AddQueueRequest) returns (Empty);
  rpc RemoveQueue(RemoveQueueRequest) returns (Empty);
  rpc GetQueueState(GetQueueRequest) returns (GetQueueResponse);
}

message GetQueueRequest {}

message GetQueueResponse {
  repeated string client_ids = 1;
  int32 queue_index = 2;
  string lock_holder = 3;
}

message AddQueueRequest {
  string client_id = 1;
  int32 queue_index = 2;
}

message RemoveQueueRequest {
  int32 queue_index = 1;
  string lockholder = 2;
  int32 counter = 3;
  int32 clientnumber = 4;
}

message Empty {}

message UpdateLeaderRequest {
  string leaderIp = 1;
}

message GetQueueIndexResponse {
  int32 index = 1;
}

message InitRequest {
  string client_name = 1;
}

message InitResponse {
  string client_id = 1;
  bool success = 2;
}

message LockRequest {
  string client_id = 1;
}

message LockResponse {
  bool success = 1;
  int32 status_code = 2;
  int32 counter = 3;
}

message AppendRequest {
  string client_id = 1;
  string filename = 2;
  bytes data = 3;
  int32 counter = 4;
}

message AppendResponse {
  bool success = 1;
  int32 counter = 2;
  int32 status_code = 3;
}
