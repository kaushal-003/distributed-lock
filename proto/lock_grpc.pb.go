// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: lock.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DistributedLock_Init_FullMethodName        = "/pb.DistributedLock/Init"
	DistributedLock_LockAcquire_FullMethodName = "/pb.DistributedLock/LockAcquire"
	DistributedLock_LockRelease_FullMethodName = "/pb.DistributedLock/LockRelease"
	DistributedLock_AppendFile_FullMethodName  = "/pb.DistributedLock/AppendFile"
)

// DistributedLockClient is the client API for DistributedLock service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DistributedLockClient interface {
	Init(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*InitResponse, error)
	LockAcquire(ctx context.Context, in *LockRequest, opts ...grpc.CallOption) (*Empty, error)
	LockRelease(ctx context.Context, in *LockRequest, opts ...grpc.CallOption) (*LockResponse, error)
	AppendFile(ctx context.Context, in *AppendRequest, opts ...grpc.CallOption) (*AppendResponse, error)
}

type distributedLockClient struct {
	cc grpc.ClientConnInterface
}

func NewDistributedLockClient(cc grpc.ClientConnInterface) DistributedLockClient {
	return &distributedLockClient{cc}
}

func (c *distributedLockClient) Init(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*InitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InitResponse)
	err := c.cc.Invoke(ctx, DistributedLock_Init_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributedLockClient) LockAcquire(ctx context.Context, in *LockRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, DistributedLock_LockAcquire_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributedLockClient) LockRelease(ctx context.Context, in *LockRequest, opts ...grpc.CallOption) (*LockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LockResponse)
	err := c.cc.Invoke(ctx, DistributedLock_LockRelease_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributedLockClient) AppendFile(ctx context.Context, in *AppendRequest, opts ...grpc.CallOption) (*AppendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AppendResponse)
	err := c.cc.Invoke(ctx, DistributedLock_AppendFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DistributedLockServer is the server API for DistributedLock service.
// All implementations must embed UnimplementedDistributedLockServer
// for forward compatibility.
type DistributedLockServer interface {
	Init(context.Context, *InitRequest) (*InitResponse, error)
	LockAcquire(context.Context, *LockRequest) (*Empty, error)
	LockRelease(context.Context, *LockRequest) (*LockResponse, error)
	AppendFile(context.Context, *AppendRequest) (*AppendResponse, error)
	mustEmbedUnimplementedDistributedLockServer()
}

// UnimplementedDistributedLockServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDistributedLockServer struct{}

func (UnimplementedDistributedLockServer) Init(context.Context, *InitRequest) (*InitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Init not implemented")
}
func (UnimplementedDistributedLockServer) LockAcquire(context.Context, *LockRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockAcquire not implemented")
}
func (UnimplementedDistributedLockServer) LockRelease(context.Context, *LockRequest) (*LockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockRelease not implemented")
}
func (UnimplementedDistributedLockServer) AppendFile(context.Context, *AppendRequest) (*AppendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendFile not implemented")
}
func (UnimplementedDistributedLockServer) mustEmbedUnimplementedDistributedLockServer() {}
func (UnimplementedDistributedLockServer) testEmbeddedByValue()                         {}

// UnsafeDistributedLockServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DistributedLockServer will
// result in compilation errors.
type UnsafeDistributedLockServer interface {
	mustEmbedUnimplementedDistributedLockServer()
}

func RegisterDistributedLockServer(s grpc.ServiceRegistrar, srv DistributedLockServer) {
	// If the following call pancis, it indicates UnimplementedDistributedLockServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DistributedLock_ServiceDesc, srv)
}

func _DistributedLock_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributedLockServer).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DistributedLock_Init_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributedLockServer).Init(ctx, req.(*InitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistributedLock_LockAcquire_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributedLockServer).LockAcquire(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DistributedLock_LockAcquire_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributedLockServer).LockAcquire(ctx, req.(*LockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistributedLock_LockRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributedLockServer).LockRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DistributedLock_LockRelease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributedLockServer).LockRelease(ctx, req.(*LockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistributedLock_AppendFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributedLockServer).AppendFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DistributedLock_AppendFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributedLockServer).AppendFile(ctx, req.(*AppendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DistributedLock_ServiceDesc is the grpc.ServiceDesc for DistributedLock service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DistributedLock_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.DistributedLock",
	HandlerType: (*DistributedLockServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Init",
			Handler:    _DistributedLock_Init_Handler,
		},
		{
			MethodName: "LockAcquire",
			Handler:    _DistributedLock_LockAcquire_Handler,
		},
		{
			MethodName: "LockRelease",
			Handler:    _DistributedLock_LockRelease_Handler,
		},
		{
			MethodName: "AppendFile",
			Handler:    _DistributedLock_AppendFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lock.proto",
}
